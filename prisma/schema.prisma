
  generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
  }
  
  datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }
        
model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String?
  username  String    @unique
  name      String?
  role      String    @default("student")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  courses     Course[]          @relation("TutorCourses")
  enrollments CourseEnrollment[]
  payments    Payment[]
  dashboard   StudentDashboard?

  @@map("users")
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  zoomLink    String
  price       Float
  slots       Json
  tutorId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  tutor       User              @relation("TutorCourses", fields: [tutorId], references: [id])
  enrollments CourseEnrollment[]
  payments    Payment[]

  @@unique([title, tutorId])
  @@map("courses")
}

model CourseEnrollment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId       String   @db.ObjectId
  userId         String   @db.ObjectId
  enrollmentDate DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  course         Course   @relation(fields: [courseId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@unique([courseId, userId])
  @@map("course_enrollments")
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  paymentStatus String
  paymentDate   DateTime @default(now())
  userId        String   @db.ObjectId
  courseId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])
  course        Course   @relation(fields: [courseId], references: [id])

  @@map("payments")
}

model StudentDashboard {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  totalCourses     Int      @default(0)
  completedCourses Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  user             User     @relation(fields: [userId], references: [id])

  @@map("student_dashboards")
}